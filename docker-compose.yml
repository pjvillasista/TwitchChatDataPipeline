services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_ENABLE_AUTH: "false"
      ZOO_MAX_CLIENT_CNXNS: 0
    ports:
      - "2181:2181"
    networks:
      - iceberg_net

  # Kafka for event streaming
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - iceberg_net

  # Kafka UI (Provectus)
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.1
    container_name: kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: docker-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - iceberg_net

  # Schema Registry for Avro schema management
  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.0
    container_name: schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iceberg_net

  schema-init:
    build:
      context: ./schema_registry
      dockerfile: Dockerfile
    container_name: schema-init
    depends_on:
      schema-registry:
        condition: service_healthy
    volumes:
      - ./schema_registry:/app/schema_registry
    working_dir: /app/schema_registry
    environment:
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    command: python3 schema_registry_client.py
    networks:
      - iceberg_net

  # Flink JobManager
  flink-jobmanager:
    build:
      context: ./flink # Custom Dockerfile is in the flink/ directory
      dockerfile: Dockerfile
    hostname: jobmanager
    container_name: flink-jobmanager
    command: jobmanager
    volumes:
      - ./flink/conf:/opt/flink/conf
      - ./flink/python-scripts:/opt/flink/python-scripts
      - ./flink/python-scripts-test:/opt/flink/python-scripts-test
    ports:
      - "8082:8082" # Flink JobManager Web UI
    depends_on:
      - kafka
      - minio
    environment:
      - AWS_REGION=us-east-1
    networks:
      iceberg_net:
        aliases:
          - flink-jobmanager

  # Flink TaskManager
  flink-taskmanager:
    build:
      context: ./flink # Custom Dockerfile is in the flink/ directory
      dockerfile: Dockerfile
    container_name: flink-taskmanager
    command: taskmanager
    depends_on:
      - flink-jobmanager
    volumes:
      - ./flink/conf:/opt/flink/conf
      - ./flink/python-scripts:/opt/flink/python-scripts
    environment:
      - AWS_REGION=us-east-1
    networks:
      - iceberg_net

  # Iceberg REST Catalog
  rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    networks:
      - iceberg_net
    ports:
      - "8181:8181"
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/v1/config"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Storage
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
      - MINIO_REGION_NAME=us-east-1
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    volumes:
      - ./minio-data:/data
    ports:
      - "9001:9001"
      - "9000:9000"
    command: ["server", "/data", "--console-address", ":9001"]

  # MinIO Client
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      - iceberg_net
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      tail -f /dev/null
      "

  # trino-coordinator:
  #   image: trinodb/trino:428
  #   hostname: trino-coordinator
  #   container_name: trino-coordinator
  #   ports:
  #     - "8088:8080"
  #   user: "root"
  #   command: >
  #     /bin/bash -c "
  #     chmod -R 755 /etc/trino &&
  #     /usr/lib/trino/bin/launcher run"
  #   volumes:
  #     - ./trino/etc/coordinator/config.properties:/etc/trino/config.properties
  #     - ./trino/etc/catalog:/etc/trino/catalog
  #     - ./trino/etc/node.properties:/etc/trino/node.properties
  #     - ./trino/etc/jvm.config:/etc/trino/jvm.config
  #   networks:
  #     - iceberg_net
  #   depends_on:
  #     - kafka
  #     - minio

  # trino-worker:
  #   image: trinodb/trino:428
  #   hostname: trino-worker1
  #   container_name: trino-worker
  #   user: "root"
  #   command: >
  #     /bin/bash -c "
  #     chmod -R 755 /etc/trino &&
  #     /usr/lib/trino/bin/launcher run"
  #   volumes:
  #     - ./trino/etc/worker/config.properties:/etc/trino/config.properties
  #     - ./trino/etc/catalog:/etc/trino/catalog
  #     - ./trino/etc/node.properties:/etc/trino/node.properties
  #     - ./trino/etc/jvm.config:/etc/trino/jvm.config
  #   networks:
  #     - iceberg_net
  #   depends_on:
  #     - trino-coordinator

volumes:
  minio-data:
  kafka-data:
    driver: local

networks:
  iceberg_net:
    driver: bridge
